"""
hin._gitignore
=================
"""
from __future__ import annotations

from pathlib import Path as _Path


class Gitignore:
    """Represents a .gitignore file.

    :param path: Parent of .gitignore file.
    """

    _contents = """\
# autogenerated by hin dotfile manager
# this .gitignore uses exclusionary rules, with only itself permitted
# to include paths add them prefixed with !
# remove everything to add all contents of this directory to version control
*
!.gitignore
"""

    def __init__(self, path: _Path) -> None:
        self._path = path / ".gitignore"

    def make(self) -> None:
        """Make a .gitignore with rules to exclude all but self."""
        if not self._path.is_file():
            self._path.write_text(self._contents)

    def append(self, rule: str | _Path) -> None:
        """Append a rule to .gitignore.

        :param rule: Rule to append.
        """
        with open(self._path, "a", encoding="utf-8") as fout:
            fout.write(f"!{rule}\n")

    def remove(self) -> None:
        """Remove .gitignore if it exists."""
        if self._path.is_file():
            self._path.unlink()


def unignore(child: _Path, parent: _Path) -> None:
    """Unignore one or more nested files.

    :param child: Child to ultimately ignore.
    :param parent: Difference between child to add .gitignore up until.
    """
    dotfile_path_parent = child.parent
    while dotfile_path_parent != parent.parent:
        gitignore = Gitignore(dotfile_path_parent)
        gitignore.make()
        gitignore.append(child.name)
        child = child.parent
        dotfile_path_parent = dotfile_path_parent.parent
