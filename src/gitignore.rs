use std::{
    fs,
    fs::OpenOptions,
    io::Write,
    path::{Path, PathBuf},
};

pub struct Gitignore {
    path: PathBuf,
    contents: String,
}

impl Gitignore {
    pub fn new(path: &Path) -> Self {
        let contents = "
        # autogenerated by hin dotfile manager
        # this .gitignore uses exclusionary rules, with only itself permitted
        # to include paths add them prefixed with !
        # remove everything to add all contents of this directory to version
        control *
        !.gitignore
        "
        .to_string();
        let path = path.join(".gitignore");
        Self { path, contents }
    }

    pub fn make(&self) {
        if !self.path.is_file() {
            fs::write(&self.path, &self.contents).unwrap()
        }
    }

    pub fn append(&self, rule: &str) {
        let mut data_file =
            OpenOptions::new().append(true).open(&self.path).unwrap();
        data_file.write_all(rule.as_bytes()).unwrap();
    }

    pub fn remove(&self) {
        if self.path.is_file() {
            fs::remove_file(&self.path).unwrap();
        }
    }
}

pub fn unignore(child: &Path, parent: &Path) {
    let mut child = child.parent().unwrap();
    let mut dotfile_path_parent = child.parent().unwrap();
    while dotfile_path_parent != parent.parent().unwrap() {
        let gitignore = Gitignore::new(dotfile_path_parent);
        gitignore.make();
        gitignore.append(child.file_name().unwrap().to_str().unwrap());
        child = child.parent().unwrap();
        dotfile_path_parent = dotfile_path_parent.parent().unwrap();
    }
}
